#include <iostream>
#include <chrono>
#include <thread>
#include <random>

void Thread_1_2_Working(const std::string& name, int& n, int* m1, int* m2)
{
	for (int i = 0; i < n; i++)
	{
		if (name == "thread1")
		{
			std::cout << m1[i] << " * " << m2[i] << " = " << m1[i] * m2[i] << "\t thread1 " << std::endl;
		}
		else if (name == "thread2")
		{
			std::cout << m1[i] << " + " << m2[i] << " = " << m1[i] + m2[i] << "\t thread2 " << std::endl;

		}
		std::this_thread::sleep_for(std::chrono::milliseconds(30));
	}
}
void Thread_3_Working(int& n3)
{
	srand(time(NULL));
	for (size_t i = 0; i < n3; i++)
	{
		std::cout << 1 + rand() % 1000 << "\t thread3" << std::endl;
	}
}

int main()
{
	std::string name1 = "thread1", name2 = "thread2", name3 = "thread3";
	srand(time(NULL));
	int First_Array[20], Second_Array[20];
	for (int i = 0; i < 20; i++)
	{
		First_Array[i] = 1 + rand() % 100;
		Second_Array[i] = 1 + rand() % 100;
	}

	int n = 20;

	std::thread thread1(Thread_1_2_Working, "thread1", std::ref(n), First_Array, Second_Array);

	std::thread thread2(Thread_1_2_Working, "thread2", std::ref(n), First_Array, Second_Array);

	std::thread thread3(Thread_3_Working, std::ref(n));


	std::cout << "Main thread has stopped working" << std::endl;
	return 0;
}